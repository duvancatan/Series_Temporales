e=rnorm(1000, sd=3)
for(i in 4:1000){
x[i]<-(-1*x[i-3]+e[i])
}
plot.ts(x)
(sqrt(5)-1)^(1/3)
(sqrt(5)+1)^(1/3)
x<-rep(0,1000)
e=rnorm(1000, sd=3)
for(i in 4:1000){
x[i]<-(-0.1*x[i-3]+e[i])
}
plot.ts(x)
x<-rep(0,1000)
e=rnorm(1000)
b=0.6
for(i in 4:1000){
x[i]<-(-b*x[i-3]+e[i])
}
plot.ts(x)
x<-rep(0,1000)
e=rnorm(1000)
b=0.6
for(i in 4:1000){
x[i]<-(b*x[i-3]+e[i])
}
plot.ts(x)
acf(x)
pacf(x)
x<-rep(0,1000)
e=rnorm(1000)
b=0.6
for(i in 2:1000){
x[i]<-(b*x[i-1]+e[i])
}
plot.ts(x)
plot.ts(x)
acf(x, lag)
pacf(x)
acf(x, lag)
acf(x, lag)
acf(x, lag.max=250)
pacf(x)
acf(x)
?acf2(x)
library("timeSeries", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?acf2(x)
library("astsa", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?acf2(x)
pacf(x)
numsim=500
numsim=500
numsim=500
theta0_ar1=5
phi1_ar1=0.8
var_RB_ar1=2
library(fArma)
install.packages("fArma")
library("fArma", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(fArma)
coefar1=c(phi1_ar1)
armaRoots(coefar1)
library(fArma)
coefar1=c(phi1_ar1)
armaRoots(coefar1)
z_ar1=arima.sim(n = numsim, list(ar = phi1_ar1), mean=theta0_ar1, sd = sqrt(var_RB_ar1), n.start=50)
ts.plot(z_ar1)
plot.ts(z_ar1)
ts.plot(z_ar1)
plot.ts(z_ar1)
?arima.sim
length(z_ar1)
par(mfrow=c(2,1))
acf(z_ar1, lag.max=15, ci=0)
pacf(z_ar1, lag.max=15, ci=0)
model_ar1 = list(ar = phi1_ar1)
par(mfrow=c(2,1))
armaTrueacf(model_ar1, lag.max=15, type = c("both"))
par(mfrow=c(1,4))
armaTrueacf(model_ar1, lag.max=15, type = c("both"))
acf(z_ar1, lag.max=15, ci=0)
pacf(z_ar1, lag.max=15, ci=0)
par(mfrow=c(1,4))
armaTrueacf(model_ar1, lag.max=15, type = c("both"))
acf(z_ar1, lag.max=15, ci=0, main="ACF Muestral")
pacf(z_ar1, lag.max=15, ci=0, main="PACF Muestral")
theta0_ar2=5
phi1_ar2=0.8
phi2_ar2=-0.65
var_RB_ar2=2
coefar2=c(phi1_ar2, phi2_ar2)
armaRoots(coefar2)
coefar2=c(phi1_ar2, phi2_ar2)
armaRoots(coefar2)
theta0_ar2=5
phi1_ar2=0.8
phi2_ar2=-0.65
var_RB_ar2=2
coefar2=c(phi1_ar2, phi2_ar2)
armaRoots(coefar2)
coefar2=c(phi1_ar2, phi2_ar2)
armaRoots(coefar2)
z_ar2=arima.sim(n = numsim, list(ar = c(phi1_ar2, phi2_ar2)), mean=theta0_ar2, sd = sqrt(var_RB_ar2), n.start=20)
ts.plot(z_ar2)
par(mfrow=c(2,1))
pacf(z_ar2, lag.max=15, ci=0)
acf(z_ar2, lag.max=15, ci=0)
model_ar2 = list(ar = c(phi1_ar2, phi2_ar2))
par(mfrow=c(2,1))
armaTrueacf(model_ar2, lag.max=15, type = c("both"))
theta0_ar2=5
phi1_ar2=0.8
phi2_ar2=-0.65
var_RB_ar2=2
coefar2=c(phi1_ar2, phi2_ar2)
armaRoots(coefar2)
coefar1=c(phi1_ar1)
armaRoots(coefar1)
1+3.3*log(21)
1+3.3*log[10](21)
log10()
1+3.3*log10(21)
?hist
?arma
?arima
?ARMAtoMA
?ARMAtoAR
0.7*0.21
0.7*0.147
ARMAtoMA(ar=0.7, ma=-0.4, 10)
?arma
?arima
?ar
?ma
dir()
setwd("~/Desktop/Ocasional_2018-2/Ejemplo_3")
library("matrixcalc", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?vec(dat)
x <- matrix( seq( 1, 16, 1 ), nrow=4, byrow=TRUE )
print( x )
vecx <- vec( x )
print( vecx )
dam<-as.matrix(dat)
dat<-read.table("Sere3.txt", dec=".", sep="")
dam<-as.matrix(dat)
dim(dam)
t(dam)
z<-vec(t(dam))
length(z)
plot.ts(z)
acf(z)
pacf(z)
dam<-
z<-vec(t(as.matrix(read.table("Sere3.txt", dec=".", sep=""))))
z<-vec(t(as.matrix(read.table("Sere3.txt", dec=".", sep=""))))
length(z)
plot.ts(z)
par(mfrow=c(1,2))
acf(z)
pacf(z)
?arima.sim()
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),
sd = sqrt(0.43))
length(z)
plot.ts(z)
par(mfrow=c(1,2))
acf(z)
pacf(z)
library("TSA", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?eacf()
eacf(z, ar.max = 7, ma.max = 13)
?eacf(z, ar.max = 7, ma.max = 13)
z1=arima.sim(n = 400, list(ar = c( -0.518), ma = c( 0.48)),
sd = sqrt(1.4))
eacf(z1, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),
sd = sqrt(1.43))
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 400, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 635, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z=arima.sim(n = 635, list(ar = c(0.974, -0.518), ma = c(-0.39, 0.48)),sd = sqrt(1.43))
eacf(z, ar.max = 7, ma.max = 13)
z
z
dir()
z<-vec(t(as.matrix(read.table("Sere3.txt", dec=".", sep=""))))
eacf(z, ar.max = 7, ma.max = 13)
ts.plot(z)
ts.plot(z)
ts.plot(z)
plot.ts(z, main="Serie", ylab="");grid()
par(mfrow=c(1,2))
acf(rt, lag.max=80, main="ACF")
par(mfrow=c(1,2))
acf(z, lag.max=80, main="ACF")
par(mfrow=c(1,2))
acf(z, lag.max=20, main="ACF")
pacf(z,lag.max=20, main="PACF")
names(eacf(z, ar.max = 7, ma.max = 13))
eacf(z, ar.max = 7, ma.max = 15)
sarima.list = function(datos, p, d = 0, q, P = 0, D = 0, Q = 0, S = NA, include.mean = F, criterio = ""){
M <- matrix(ncol = 10,nrow = (p+1)*(q+1)*(P+1)*(Q+1),dimnames=list(NULL,c("p","d","q","P","D","Q","S","converge","AIC", "BIC")))
k <- 1
n <- length(datos)
for(i in 0:p){
for(j in 0:q){
for(l in 0:P){
for(m in 0:Q){
if ((i==0)&&(j==0)&&(l==0)&&(m==0)) next #Continua con la siguiente iteracion
fit <- arima(datos, order = c(i, d, j),seasonal = list(order = c(l, D, m), period = S), include.mean = include.mean)
M[k,1]  <- i
M[k,2]  <- d
M[k,3]  <- j
M[k,4]  <- l
M[k,5]  <- D
M[k,6]  <- m
M[k,7]  <- S
M[k,8]  <- fit$code  # 0: Convergencia, 1: No Convergencia
M[k,9]  <- AIC(fit)  # AIC
M[k,10] <- AIC(fit, k = log(length(datos)))  # BIC
k <- k+1
}
}
}
}
if(criterio == "AIC"){
M <- M[order(M[,9]),]
}
if(criterio == "BIC"){
M <- M[order(M[,10]),]
}
if(criterio == ""){
M <- M
}
rownames(M) = rep("", (p+1)*(q+1)*(P+1)*(Q+1))
return(M[1:((p+1)*(q+1)*(P+1)*(Q+1)-1),])
}
sarima.list(z, p=3, d = 0, q=3, P = 0, D = 0, Q = 0, S = NA, include.mean = F, criterio = "")
(mod_1=arima(lz, c(2, 0, 2), method = c("CSS-ML")))
(mod_1=arima(z, c(2, 0, 2), method = c("CSS-ML")))
par(mfrow=c(3,2))
plot.ts(res_1, main="Residuales", ylab="")
hist(res_1, main="Histograma de Residuales")
res_1=residuals(mod_1)
par(mfrow=c(3,2))
plot.ts(res_1, main="Residuales", ylab="")
hist(res_1, main="Histograma de Residuales")
acf(res_1, lag.max=25, main="ACF de Residuales")
pacf(res_1, lag.max=25, main="PACF de Residuales")
Box.Test = function(x, lag = 25, main = "p values for Ljung-Box statistic"){
B<-vector("numeric")
for(i in 1:lag){
B[i]<-Box.test(x, lag = i, type = "Ljung-Box")$p.value
}
A<-matrix(cbind(c(1:lag),B), nrow = lag, ncol = 2, byrow=F, dimnames = list(NULL, c("lag", "p.value")))
plot(A[,1], A[,2], ylim = c(0, max(0.051,(max(A[,2])+.01))),
ylab = "p-value", xlab = "Lag", main = main, lwd = 2)
abline(0.05, 0, col = 4, lty = 2)
}
Box.Test(res_1)
shapiro.test(res_1)
qqnorm(res_1, main="QQ de los Residuales")
qqline(res_1)
library(nortest)
lillie.test(res_1)
library(stats)
ks.test(res_1,"pnorm",mean(res_1), sd(res_1))
mod<-arima(z, order = c(2, 0, 2),method = c("CSS-ML"))
forecast(mod)
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
forecast(mod)
forecast(mod)
plot(forecast(mod), ylab="H02 sales (million scripts)", xlab="Year")
(lz.pred<-predict(mod, n.ahead = 10, se.fit = T))
plot.ts(lz,xlim=c(0,900), ylim=c(1,1.8),ylab="", main="Prediccion Serie 5");grid()
plot.ts(z, main="Prediccion Serie 5");grid()
z.pred<-predict(mod,n.ahead=10)
lines(z.pred$pred,col="blue", lty=3, lwd=2)
lines(z.pred$pred+2*z.pred$se,col="red",lty=3, lwd=2)
lines(z.pred$pred-2*z.pred$se,col="red",lty=3, lwd=2)
plot.ts(z, xlim=c(0,700) main="Prediccion Serie 5");grid()
plot.ts(z, xlim=c(0,700), main="Prediccion Serie 5");grid()
z.pred<-predict(mod,n.ahead=10)
lines(z.pred$pred,col="blue", lty=3, lwd=2)
lines(z.pred$pred+2*z.pred$se,col="red",lty=3, lwd=2)
lines(z.pred$pred-2*z.pred$se,col="red",lty=3, lwd=2)
z.pred<-predict(mod,n.ahead=30)
lines(z.pred$pred,col="blue", lty=3, lwd=2)
lines(z.pred$pred+2*z.pred$se,col="red",lty=3, lwd=2)
lines(z.pred$pred-2*z.pred$se,col="red",lty=3, lwd=2)
z.pred<-predict(mod,n.ahead=50)
lines(z.pred$pred,col="blue", lty=3, lwd=2)
lines(z.pred$pred+2*z.pred$se,col="red",lty=3, lwd=2)
lines(z.pred$pred-2*z.pred$se,col="red",lty=3, lwd=2)
mod<-arima(z, order = c(2, 0, 2), method = c("CSS-ML"))
forecast(mod)
plot(forecast(mod), ylab="H02 sales (million scripts)", xlab="Year")
(z.pred<-predict(mod, n.ahead = 50, se.fit = T))
plot.ts(z, xlim=c(0,700), main="Prediccion Serie 5");grid()
z.pred<-predict(mod,n.ahead=50)
lines(z.pred$pred,col="blue", lty=3, lwd=2)
lines(z.pred$pred+2*z.pred$se,col="red",lty=3, lwd=2)
lines(z.pred$pred-2*z.pred$se,col="red",lty=3, lwd=2)
z.pred<-predict(mod,n.ahead=100)
lines(z.pred$pred,col="blue", lty=3, lwd=2)
lines(z.pred$pred+2*z.pred$se,col="red",lty=3, lwd=2)
lines(z.pred$pred-2*z.pred$se,col="red",lty=3, lwd=2)
forecast(mod)
plot(forecast(mod), ylab="H02 sales (million scripts)", xlab="Year")
(predict(mod, n.ahead = 10, se.fit = F))
(predict(mod, n.ahead = 10, se.fit = F))
cbind(s5.pred$pred+2*s5.pred$se, s5.pred$pred-2*s5.pred$se)
cbind(z.pred$pred+2*z.pred$se, z.pred$pred-2*z.pred$se)
plot(forecast(mod), ylab="H02 sales (million scripts)", xlab="Year")
plot.ts(z, xlim=c(0,700), main="Prediccion Serie 5");grid()
z.pred<-predict(mod,n.ahead=100)
lines(z.pred$pred,col="blue", lty=3, lwd=2)
lines(z.pred$pred+2*z.pred$se,col="red",lty=3, lwd=2)
lines(z.pred$pred-2*z.pred$se,col="red",lty=3, lwd=2)
z<-scan(dec=",")
ts.plot(z)
plot(z, main="Serie", ylab="");grid()
ts.plot(z, main="Serie", ylab="");grid()
par(mfrow=c(1,2))
acf(z, lag.max=30, main="ACF", ci=0)
z<-as.ts(z)
ts.plot(z, main="Serie", ylab="");grid()
par(mfrow=c(1,2))
acf(z, lag.max=30, main="ACF", ci=0)
acf(z, lag.max=30, main="ACF")
pacf(z,lag.max=30, main="PACF")
acf(z, lag.max=60, main="ACF")
length(z)
acf(z, lag.max=500, main="ACF")
acf(z, lag.max=500, main="ACF")
pacf(z,lag.max=500, main="PACF")
boxcox(z ~ 1, lambda = seq(-2, 2, 1/10), plotit = TRUE, xlab = expression(lambda),
ylab = "log-Likelihood")
library(MASS)
boxcox(z ~ 1, lambda = seq(-2, 2, 1/10), plotit = TRUE, xlab = expression(lambda),
ylab = "log-Likelihood")
library(car)
(tbc=powerTransform(z))
lz<-log(z)
ts.plot(lz)
plot(rt, ylab="", main="Log Retornos");grid()
rt<-diff(lz)
plot(rt, ylab="", main="Log Retornos");grid()
par(mfrow=c(1,2))
acf(rt, lag.max=200, main="")
pacf(rt, lag.max=200, main="")
acf(rt, lag.max=30, main="")
pacf(rt, lag.max=30, main="")
acf(rt, lag.max=50, main="")
pacf(rt, lag.max=50, main="")
sarima.list = function(datos, p, d = 0, q, P = 0, D = 0, Q = 0, S = NA, include.mean = F, criterio = ""){
M <- matrix(ncol = 10,nrow = (p+1)*(q+1)*(P+1)*(Q+1),dimnames=list(NULL,c("p","d","q","P","D","Q","S","converge","AIC", "BIC")))
k <- 1
n <- length(datos)
for(i in 0:p){
for(j in 0:q){
for(l in 0:P){
for(m in 0:Q){
if ((i==0)&&(j==0)&&(l==0)&&(m==0)) next #Continua con la siguiente iteracion
fit <- arima(datos, order = c(i, d, j),seasonal = list(order = c(l, D, m), period = S), include.mean = include.mean)
M[k,1]  <- i
M[k,2]  <- d
M[k,3]  <- j
M[k,4]  <- l
M[k,5]  <- D
M[k,6]  <- m
M[k,7]  <- S
M[k,8]  <- fit$code  # 0: Convergencia, 1: No Convergencia
M[k,9]  <- AIC(fit)  # AIC
M[k,10] <- AIC(fit, k = log(length(datos)))  # BIC
k <- k+1
}
}
}
}
if(criterio == "AIC"){
M <- M[order(M[,9]),]
}
if(criterio == "BIC"){
M <- M[order(M[,10]),]
}
if(criterio == ""){
M <- M
}
rownames(M) = rep("", (p+1)*(q+1)*(P+1)*(Q+1))
return(M[1:((p+1)*(q+1)*(P+1)*(Q+1)-1),])
}
sarima.list(s5, p=10, d = 0, q=10, P = 0, D = 0, Q = 0, S = NA, include.mean = F, criterio = "")
sarima.list(rt, p=10, d = 0, q=10, P = 0, D = 0, Q = 0, S = NA, include.mean = F, criterio = "")
(mod_1=arima(rt, c(15, 0 ,0), method = c("CSS")))
res_1=residuals(mod_1)
(mod_2=arima(s5, c(15, 0 ,0), method = c("ML")))
res_2=residuals(mod_2)
(mod_3=arima(s5, c(15, 0 ,0), method = c("CSS-ML")))
res_3=residuals(mod_3)
par(mfrow=c(3,2))
plot.ts(res_1, main="Residuales", ylab="")
hist(res_1, main="Histograma de Residuales")
acf(res_1, lag.max=25, main="ACF de Residuales")
pacf(res_1, lag.max=25, main="PACF de Residuales")
Box.Test = function(x, lag = 25, main = "p values for Ljung-Box statistic"){
B<-vector("numeric")
for(i in 1:lag){
B[i]<-Box.test(x, lag = i, type = "Ljung-Box")$p.value
}
A<-matrix(cbind(c(1:lag),B), nrow = lag, ncol = 2, byrow=F, dimnames = list(NULL, c("lag", "p.value")))
plot(A[,1], A[,2], ylim = c(0, max(0.051,(max(A[,2])+.01))),
ylab = "p-value", xlab = "Lag", main = main, lwd = 2)
abline(0.05, 0, col = 4, lty = 2)
}
?arima
mod_2=arima(s5, c(15, 0 ,0), method = c("ML"), fixed = c(0,0,0,NA,NA,NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA))
mod_2=arima(rt, c(15, 0 ,0), method = c("ML"), fixed = c(0,0,0,NA,NA,NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA))
mod_2=arima(rt, c(15, 0 ,0), method = c("ML"), fixed = c(0,0,0,NA,NA,NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(0,0,0,NA,NA)),#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
res_2=residuals(mod_2)
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(0,0,0,NA,NA))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(0,0,0,NA,NA,NA))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(0,0,0,NA,NA,0))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(0,0,NA,NA,0))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(NA,NA,NA,NA,NA))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(NA,NA,NA,NA,NA,NA))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(0,NA,NA,NA,NA,NA))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(NA,0,NA,NA,NA,NA))#NA,NA,NA,NA,0,NA,NA,NA,NA,0,NA,0))
mod_2
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(NA,NA,NA,0,0,0,0,0,0,0,NA,0,0,0,0,0,NA))
mod_2
mod_2=arima(rt, c(5, 0 ,0), method = c("ML"), fixed = c(NA,NA,NA,0,0,0,0,0,0,NA,0,0,0,0,NA,NA))
mod_2=arima(rt, c(15, 0 ,0), method = c("ML"), fixed = c(NA,NA,NA,0,0,0,0,0,0,NA,0,0,0,0,NA,NA))
mod_2
mod_1=arima(rt, c(15, 0 ,0), method = c("ML"), fixed = c(NA,NA,NA,0,0,0,0,0,0,NA,0,0,0,0,NA,NA))
res_1=residuals(mod_2)
res_1=residuals(mod_1)
par(mfrow=c(3,2))
plot.ts(res_1, main="Residuales", ylab="")
hist(res_1, main="Histograma de Residuales")
acf(res_1, lag.max=25, main="ACF de Residuales")
pacf(res_1, lag.max=25, main="PACF de Residuales")
Box.Test = function(x, lag = 25, main = "p values for Ljung-Box statistic"){
B<-vector("numeric")
for(i in 1:lag){
B[i]<-Box.test(x, lag = i, type = "Ljung-Box")$p.value
}
A<-matrix(cbind(c(1:lag),B), nrow = lag, ncol = 2, byrow=F, dimnames = list(NULL, c("lag", "p.value")))
plot(A[,1], A[,2], ylim = c(0, max(0.051,(max(A[,2])+.01))),
ylab = "p-value", xlab = "Lag", main = main, lwd = 2)
abline(0.05, 0, col = 4, lty = 2)
}
Box.Test(res_1)
shapiro.test(res_1)
qqnorm(res_1, main="QQ de los Residuales")
qqline(res_1)
acf(res_1, lag.max=25, main="ACF de Residuales")
pacf(res_1, lag.max=25, main="PACF de Residuales")
